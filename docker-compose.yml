#docker network create test
version: "2"
x-airflow-common:
  &airflow-common
  image: jaihind213/angiogram-airflow:4.0
  #platform: linux/amd64
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@${HOST_IP}:5433/postgres
    - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__LOGGING_LEVEL=INFO
    - AIRFLOW__API__AUTH_BACKEND=airflow.api.auth.backend.basic_auth
    - RAW_DATA_PATH=/opt/angiogram/data/raw_data
    - STATS_DATA_PATH=/opt/angiogram/data/stats_data
    - KAFKA_BROKER_URL=kafka:9092
    - TAXI_TOPIC=taxi_rides
  volumes:
    - ./dags:/opt/airflow/dags
    - ./airflow-data/angiogram_data/:/opt/angiogram/data
    - ./airflow-data/logs:/opt/airflow/logs
    - ./airflow-data/plugins:/opt/airflow/plugins
    - ./airflow-data/airflow.cfg:/opt/airlfow/airflow.cfg
services:
  zookeeper:
    image: 'bitnami/zookeeper:3.5'
    #docker run --name zookeeper -d --hostname=zookeeper --network=test -e ZK_SERVER_HEAP=128  -e ALLOW_ANONYMOUS_LOGIN=yes  -p 2181:2181 -t bitnami/zookeeper:3.5
    #in github workflow, start zk seperately, if put in docker-compose, sometimes it takes time and kafka does not startup properly
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZK_SERVER_HEAP=128
    networks:
      - angiogram
  kafka:
    image: 'bitnami/kafka:3.2'
    #hostname: kafka
    #pass the external host ip as env variable HOST_IP before running this compose.
    #ex: export HOST_IP=$(hostname -I | awk '{print $1}')
    ports:
      - "9092:9092"
      - "9094:9094"
      - "9095:9095"
    networks:
      - angiogram
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094,EXTERNAL2://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094,EXTERNAL2://${HOST_IP}:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL2:PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    networks:
      - angiogram
    command: bash -c "sleep 40;
             kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic taxi_rides  --replication-factor 1 --partitions 1 ; "
  postgres:
    networks:
      - angiogram
    image: hbontempo/postgres-hll:15-alpine3.17-latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5433:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
  angiogram-api:
    image: jaihind213/angiogram-api:4.1
    container_name: angiogram-api
    networks:
      - angiogram
    ports:
      - "8000:8000"
    environment:
      KAFKA_BROKER_URL: kafka:9092
      TAXI_TOPIC: taxi_rides
    depends_on:
      - kafka
      - init-kafka
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - airflow db init &&
        airflow users create
        --role Admin
        --username airflow
        --password airflow
        --email airflow@airflow.com
        --firstname airflow
        --lastname airflow
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    command: airflow webserver
    ports:
      - 8080:8080
    container_name: airflow_webserver
    restart: always
    networks:
      - angiogram

  airflow-scheduler:
    <<: *airflow-common
    command: airflow scheduler
    container_name: airflow_scheduler
    restart: always
    networks:
      - angiogram

volumes:
  kafka_data:
    driver: local
  db_data:
    driver: local

networks:
  #create network called 'test' outside this file
  #or point to 'minikube' network while using minikube k8s
  #ex: 'docker network create angiogram'
  angiogram:
    external: true
